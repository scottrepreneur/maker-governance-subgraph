enum ActionType {
  LOCK
  FREE
  LIFT
  VOTE
  VOTER
  ETCH
  CAST
  POLL_CREATED
}

type VoterRegistry @entity {
  id: ID!

  coldAddress: Bytes!

  hotAddress: Bytes!

  voteProxies: [VoteProxy!]! @derivedFrom(field: "owner")

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type VoteProxy @entity {
  " VoteProxy address"
  id: ID!

  " Amount of loked MKR"
  locked: BigDecimal!

  owner: VoterRegistry!

  " Its currents voted slate"
  votedSlate: Slate
}

type AddressVoter @entity {
  " Address"
  id: ID!

  " Amount of loked MKR"
  locked: BigDecimal!

  " Its currents voted slate"
  votedSlate: Slate

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type Slate @entity {
  # TODO: Document
  id: ID!

  # TODO: Document
  yays: [Bytes!]

  " Timestamp when the slate was created as seconds"
  timestamp: BigInt!

  # TODO: Document
  votedByProxies: [VoteProxy!] @derivedFrom(field: "votedSlate")

  # TODO: Document
  votedByAddresses: [AddressVoter!] @derivedFrom(field: "votedSlate")
}

type Spell @entity {
  " ID represent the contract address "
  id: ID!

  " Timestamp when the spell was voted by the first time"
  timestamp: BigInt!

  " Spell's short description "
  description: String

  " Spell's data "
  data: Bytes

  " Timestamp when the spell is casted"
  casted: BigInt

  " How much MKR it has when the spell is casted"
  castedWith: BigDecimal

  " Timestamp when the spell is casted"
  lifted: BigInt

  " How much MKR it has when the spell is lifted to hat"
  liftedWith: BigDecimal

  " Total MKR supporting this spell"
  approvals: BigDecimal!

  " Total voters supporting this spell"
  totalVotes: BigInt

  # TODO: Document
  timeLineCount: BigInt!

  # TODO: Document
  timeLine: [VotingAction!] @derivedFrom(field: "spell")
}

#
# Voting Action
#
interface VotingAction {
  " Equals to: <actionType>-<transactionHash>-<logIndex> "
  id: ID!

  " Voter's Address "
  sender: Bytes!

  " Spell related to this action"
  spell: Spell

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type AddAction implements VotingAction @entity {
  " Equals to: <ADD | ADD-ARRAY>-<transactionHash>-<logIndex> "
  id: ID!

  " Voter's Address "
  sender: Bytes!

  " Spell related to this action"
  spell: Spell

  " Amount of loked MKR the sender had at the moment this action is performed"
  locked: BigDecimal!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type RemoveAction implements VotingAction @entity {
  " Equals to: <REMOVE | REMOVE-ARRAY>-<transactionHash>-<logIndex> "
  id: ID!

  " Voter's Address "
  sender: Bytes!

  " Spell related to this action"
  spell: Spell

  " Amount of loked MKR the sender had at the moment this action is performed"
  locked: BigDecimal!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type LockAction implements VotingAction @entity {
  " Equals to: <LOCK>-<transactionHash>-<logIndex> "
  id: ID!

  " Voter's Address "
  sender: Bytes!

  " Spell related to this action"
  spell: Spell

  " Amount of MKR locked or withdrawn"
  wad: BigDecimal!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type FreeAction implements VotingAction @entity {
  " Equals to: <FREE>-<transactionHash>-<logIndex> "
  id: ID!

  " Voter's Address "
  sender: Bytes!

  " Spell related to this action"
  spell: Spell

  " Amount of MKR locked or withdrawn"
  wad: BigDecimal!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type Poll @entity {
  " Equals to: <Poll ID> "
  id: ID!

  # TODO: Document
  creator: Bytes

  # TODO: Document
  blockCreated: BigInt!

  # TODO: Document
  pollId: BigInt!

  # TODO: Document
  startDate: BigInt!

  # TODO: Document
  endDate: BigInt!

  # TODO: Document
  multiHash: String

  # TODO: Document
  url: String

  " Withdrawal timestamp "
  withdrawn: BigInt

  " Number votes"
  votesCount: BigInt!

  # TODO: Document
  votes: [PollVote!] @derivedFrom(field: "poll")

  " Number of record in timeLine "
  timeLineCount: BigInt!

  " Poll historical data "
  timeLine: [PollAction!] @derivedFrom(field: "poll")
}

type PollVote @entity {
  " Equals to: <Poll ID>-<Voter's Address> "
  id: ID!

  " Voters's Address "
  voter: Bytes!

  " Poll related to this action"
  poll: Poll

  " Selected option "
  option: BigInt!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Vote timestamp as seconds (time) "
  timestamp: BigInt!
}

#
# Poll Action
#
interface PollAction {
  " Equals to: <actionType>-<transactionHash>-<voter> "
  id: ID!

  " Poll related to this action"
  poll: Poll

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type CreatePollAction implements PollAction @entity {
  " Equals to: <CREATE>-<transactionHash>-<creator> "
  id: ID!

  " Spell related to this action"
  poll: Poll

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type VotePollAction implements PollAction @entity {
  " Equals to: <VOTE>-<transactionHash>-<voter> "
  id: ID!

  " Voter's Address "
  sender: Bytes!

  " Spell related to this action"
  poll: Poll

  " Selected option "
  option: BigInt!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type WithdrawPollAction implements PollAction @entity {
  " Equals to: <WITHDRAW>-<transactionHash>-<voter> "
  id: ID!

  " Voter's Address "
  sender: Bytes!

  " Spell related to this action"
  poll: Poll

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type Action @entity {
  # TODO: Document
  id: ID!

  # TODO: Document
  sender: Bytes

  " Action name (act) "
  type: ActionType!

  " Action value (arg) "
  wad: BigDecimal

  " New Hat"
  hat: Bytes

  " Spell casted"
  spell: Bytes

  " Votes"
  yays: [Bytes!]

  " Slate voted"
  slate: Bytes

  " New voter address"
  voterAddress: Bytes

  " Is the new voter a VoteProxy"
  isVoteProxy: Boolean

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type GovernanceInfo @entity {
  # TODO: Document

  id: ID!

  # Number of VoteProxy contracts created
  countProxies: BigInt!

  # Number of unique address that ever locked some MKR in the Chief
  countAddresses: BigInt!

  # Number of Slates
  countSlates: BigInt!

  # Number of Spells
  countSpells: BigInt!

  # Number of lock actions
  countLock: BigInt!

  # Number of free actions
  countFree: BigInt!

  # Number of Polls
  countPolls: BigInt!

  # Number of casted spells
  countCasted: BigInt!

  # MKR currently locked in Chief
  locked: BigDecimal!

  # Last block number processed
  lastBlock: BigInt!

  # Timestamp as seconds of last block processed
  lastSynced: BigInt!

  # Current hat
  hat: Bytes

  # Last casted spell
  active: Bytes
}
